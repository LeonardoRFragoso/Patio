#!/usr/bin/env python3
"""
Script para investigar problemas de login com o usu√°rio teste_admin
"""

import sqlite3
from werkzeug.security import check_password_hash, generate_password_hash

def debug_teste_admin():
    """Investiga problemas com o usu√°rio teste_admin"""
    
    print("üîç INVESTIGANDO PROBLEMA COM USU√ÅRIO teste_admin")
    print("=" * 50)
    
    try:
        # Conectar ao banco
        conn = sqlite3.connect('database.db')
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # 1. Verificar se o usu√°rio teste_admin existe
        print("1. VERIFICANDO EXIST√äNCIA DO USU√ÅRIO")
        print("-" * 30)
        
        cursor.execute("SELECT * FROM usuarios WHERE username = ?", ('teste_admin',))
        user = cursor.fetchone()
        
        if user:
            print(f"‚úÖ Usu√°rio encontrado:")
            print(f"   ID: {user['id']}")
            print(f"   Username: {user['username']}")
            print(f"   Email: {user['email']}")
            print(f"   N√≠vel: {user['nivel']}")
            print(f"   Created at: {user['created_at']}")
            print(f"   Hash: {user['password_hash'][:30]}...")
        else:
            print("‚ùå Usu√°rio teste_admin N√ÉO encontrado!")
            
            # Verificar usu√°rios similares
            cursor.execute("SELECT username, nivel FROM usuarios WHERE username LIKE '%test%' OR username LIKE '%admin%'")
            similar = cursor.fetchall()
            
            if similar:
                print("\nüîç Usu√°rios similares encontrados:")
                for u in similar:
                    print(f"   - {u[0]} (n√≠vel: {u[1]})")
            
            return False
        
        # 2. Testar senha padr√£o "1234"
        print("\n2. TESTANDO SENHA PADR√ÉO '1234'")
        print("-" * 30)
        
        senha_teste = "1234"
        if check_password_hash(user['password_hash'], senha_teste):
            print("‚úÖ Senha '1234' est√° CORRETA")
        else:
            print("‚ùå Senha '1234' est√° INCORRETA")
            
            # Testar outras senhas comuns
            senhas_comuns = ['admin', 'teste', 'teste_admin', '123456', 'password']
            print("\nüîç Testando senhas comuns:")
            for senha in senhas_comuns:
                if check_password_hash(user['password_hash'], senha):
                    print(f"‚úÖ Senha '{senha}' funciona!")
                    break
            else:
                print("‚ùå Nenhuma senha comum funciona")
        
        # 3. Verificar n√≠vel de acesso
        print("\n3. VERIFICANDO N√çVEL DE ACESSO")
        print("-" * 30)
        
        if user['nivel'] == 'admin':
            print("‚úÖ N√≠vel 'admin' est√° correto")
        else:
            print(f"‚ö†Ô∏è  N√≠vel atual: '{user['nivel']}' (esperado: 'admin')")
        
        # 4. Verificar tentativas de login recentes
        print("\n4. VERIFICANDO TENTATIVAS DE LOGIN")
        print("-" * 30)
        
        try:
            cursor.execute("SELECT * FROM login_attempts WHERE username = ? ORDER BY timestamp DESC LIMIT 5", ('teste_admin',))
            attempts = cursor.fetchall()
            
            if attempts:
                print("üìã √öltimas tentativas de login:")
                for attempt in attempts:
                    print(f"   - {attempt['timestamp']}: {attempt['success']} (IP: {attempt['ip_address']})")
            else:
                print("‚ÑπÔ∏è  Nenhuma tentativa de login registrada")
        except:
            print("‚ÑπÔ∏è  Tabela login_attempts n√£o existe ou est√° vazia")
        
        # 5. Recriar usu√°rio se necess√°rio
        print("\n5. OP√á√ÉO DE CORRE√á√ÉO")
        print("-" * 30)
        
        if user['nivel'] != 'admin' or not check_password_hash(user['password_hash'], '1234'):
            print("üîß Usu√°rio precisa ser corrigido!")
            
            corrigir = input("Deseja corrigir o usu√°rio teste_admin? (s/N): ").lower().strip()
            if corrigir == 's':
                # Atualizar usu√°rio
                new_hash = generate_password_hash('1234', method='pbkdf2:sha256')
                
                cursor.execute("""
                    UPDATE usuarios 
                    SET nivel = ?, password_hash = ?
                    WHERE username = ?
                """, ('admin', new_hash, 'teste_admin'))
                
                conn.commit()
                print("‚úÖ Usu√°rio teste_admin corrigido!")
                print("   - N√≠vel: admin")
                print("   - Senha: 1234")
        else:
            print("‚úÖ Usu√°rio est√° configurado corretamente")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO: {str(e)}")
        return False

if __name__ == "__main__":
    debug_teste_admin()
