/**
 * Script para corrigir o problema de exibi√ß√£o de erro ap√≥s movimenta√ß√£o bem-sucedida
 * Este script tamb√©m gerencia o combobox din√¢mico de "Nova Posi√ß√£o" usando Choices.js
 */

// -------------------- COMBOBOX "NOVA POSI√á√ÉO" DIN√ÇMICO --------------------
let posicaoChoices = null;

// Carregar posi√ß√µes via backend e popular o select com organiza√ß√£o hier√°rquica
async function carregarPosicoesMovimentacao(forceRefresh = false) {
  const select = document.getElementById('posicao_nova');
  const containerInput = document.getElementById('container_movimentacao');
  const btnRefresh = document.querySelector('.btn-refresh[onclick*="carregarPosicoesMovimentacao"]');

  if (!select || !containerInput) return;

  const numeroContainer = containerInput.value.trim();
  if (!numeroContainer) {
    Swal.fire({
      icon: 'info',
      title: 'Informe o Container',
      text: 'Digite primeiro o n√∫mero do container para carregar as posi√ß√µes v√°lidas.'
    });
    return;
  }

  // Evitar recarregar se j√° est√° carregado para este container
  if (!forceRefresh && select.dataset.loadedFor === numeroContainer) return;

  btnRefresh?.classList.add('rotating');
  select.disabled = true;

  try {
    const resp = await fetch(`/operacoes/posicoes/movimentacao/${numeroContainer}`);
    const data = await resp.json();

    if (!resp.ok || !data.success) {
      throw new Error(data.error || 'Erro ao buscar posi√ß√µes.');
    }

    // Extrair lista de posi√ß√µes do backend
    const posicoes = data.posicoes.map(pos => pos.codigo || pos);
    
    console.log(`üìä Carregando ${posicoes.length} posi√ß√µes organizadas para container ${numeroContainer}`);

    // Usar o organizador de posi√ß√µes para estruturar hierarquicamente
    if (typeof window.organizarComboboxPosicoes === 'function') {
      // Usar organizador moderno com op√ß√£o de grid
      const resultado = window.organizarComboboxPosicoes(select, posicoes, {
        showStats: true,
        showViewToggle: true,
        showGridView: false, // Come√ßar com lista, usu√°rio pode alternar
        searchPlaceholderValue: 'Digite bay (A-E), posi√ß√£o (01-20) ou altura (1-5)...',
        onPositionSelect: (posicao, posicaoInfo) => {
          console.log(`üéØ Posi√ß√£o selecionada para movimenta√ß√£o: ${posicao}`);
          
          // Disparar evento para outros listeners
          select.dispatchEvent(new CustomEvent('positionSelected', {
            detail: { posicao, posicaoInfo }
          }));
        }
      });
      
      posicaoChoices = resultado.choices;
      
      console.log(`‚úÖ Posi√ß√µes organizadas para movimenta√ß√£o: ${resultado.stats.totalPosicoes} posi√ß√µes em ${Object.keys(resultado.stats.porBay).length} bays`);
    } else {
      // Fallback para m√©todo tradicional
      console.warn('‚ö†Ô∏è Organizador de posi√ß√µes n√£o dispon√≠vel, usando m√©todo tradicional');
      
      select.innerHTML = '<option value="">Selecione a posi√ß√£o</option>';
      
      posicoes.forEach((pos) => {
        const option = document.createElement('option');
        option.value = pos;
        option.textContent = pos;
        select.appendChild(option);
      });
      
      // Inicializar Choices b√°sico
      if (!posicaoChoices) {
        posicaoChoices = new Choices(select, {
          searchEnabled: true,
          shouldSort: false,
          placeholderValue: 'Selecione a posi√ß√£o',
          itemSelectText: '',
          noResultsText: 'Nenhuma posi√ß√£o encontrada',
          loadingText: 'Carregando posi√ß√µes...'
        });
      } else {
        posicaoChoices.setChoices(Array.from(select.options).map(o => ({ value: o.value, label: o.textContent, selected: o.selected, disabled: o.disabled })), 'value', 'label', true);
      }
    }

    select.disabled = false;
    select.dataset.loadedFor = numeroContainer;

  } catch (err) {
    console.error('‚ùå Erro ao carregar posi√ß√µes:', err);
    Swal.fire({ icon: 'error', title: 'Erro', text: err.message });
  } finally {
    btnRefresh?.classList.remove('rotating');
  }
}

// Configurar listeners para carregar posi√ß√µes quando o container mudar (debounce 500ms)
function configurarEventosMovimentacao() {
  // Delega√ß√£o de eventos para garantir que funciona mesmo ap√≥s clonagem do formul√°rio
  document.addEventListener('input', function(e) {
    if (e.target && e.target.id === 'container_movimentacao') {
      // Debounce por input r√°pido
      if (window.__debounceTimerMovPos) clearTimeout(window.__debounceTimerMovPos);
      window.__debounceTimerMovPos = setTimeout(() => carregarPosicoesMovimentacao(true), 500);
    }
  });

  document.addEventListener('change', function(e) {
    if (e.target && e.target.id === 'container_movimentacao') {
      carregarPosicoesMovimentacao(true);
    }
  });



  // Tamb√©m lidar com evento customizado do m√≥dulo movimentacao (caso existam)
  document.addEventListener('containerSelecionado', function(e) {
    carregarPosicoesMovimentacao(true);
  });
  const containerInput = document.getElementById('container_movimentacao');
  if (!containerInput) return;

  let timer = null;
  const debouncedLoad = () => {
    clearTimeout(timer);
    timer = setTimeout(() => carregarPosicoesMovimentacao(true), 500);
  };
  // Quando digitando
  containerInput.addEventListener('input', debouncedLoad);
  // Quando o usu√°rio seleciona uma sugest√£o ou sai do campo
  containerInput.addEventListener('change', () => carregarPosicoesMovimentacao(true));
  containerInput.addEventListener('blur', () => carregarPosicoesMovimentacao(false));
}

// Inicializar eventos ap√≥s todos os scripts
window.addEventListener('load', () => {
  setTimeout(() => {
    configurarEventosMovimentacao();
    // Caso o container j√° esteja preenchido (ex: ao voltar atr√°s), carregar posi√ß√µes imediatamente
    const prefilled = document.getElementById('container_movimentacao');
    if (prefilled && prefilled.value.trim()) {
      carregarPosicoesMovimentacao(true);
    }
  }, 500);
});

// ---------------------------------------------------------------------------

/**
 * Este script intercepta o submit do formul√°rio de movimenta√ß√£o
 */

// Fun√ß√£o para processar a movimenta√ß√£o via AJAX
async function processarMovimentacao() {
        try {
            // Obter dados do formul√°rio
            const container = document.getElementById('container_movimentacao').value;
            const posicaoOriginal = document.getElementById('posicao_original').value;
            const posicaoNova = document.getElementById('posicao_nova').value;
            const observacoes = document.getElementById('observacoes_movimentacao').value;
            
            // Validar dados
            if (!container || !posicaoNova) {
                Swal.fire({
                    icon: 'error',
                    title: 'Dados incompletos',
                    text: 'Por favor, preencha o n√∫mero do container e a nova posi√ß√£o.',
                    confirmButtonColor: '#dc3545'
                });
                return;
            }
            
            // Exibir modal de confirma√ß√£o
            const result = await Swal.fire({
                icon: 'question',
                title: 'Confirmar Movimenta√ß√£o',
                html: `
                    <div class="text-left">
                    <p><strong>Container:</strong> ${container}</p>
                    <p><strong>Posi√ß√£o Atual:</strong> ${posicaoOriginal}</p>
                    <p><strong>Nova Posi√ß√£o:</strong> ${posicaoNova}</p>
                    ${observacoes ? `<p><strong>Observa√ß√µes:</strong> ${observacoes}</p>` : ''}
                    </div>
                `,
                showCancelButton: true,
                confirmButtonText: 'Confirmar',
                cancelButtonText: 'Cancelar',
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#dc3545',
                reverseButtons: true
            });
            
            // Se confirmado, enviar dados via AJAX
            if (result.isConfirmed) {
                // Mostrar loading
                Swal.fire({
                    title: 'Processando...',
                    text: 'Registrando movimenta√ß√£o, aguarde...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                try {
                    // Obter token CSRF
                    const csrfResponse = await fetch('/api/csrf-token');
                    const csrfData = await csrfResponse.json();
                    const csrfToken = csrfData.csrf_token;
                    
                    // Enviar dados via AJAX para o endpoint de registrar opera√ß√£o
                    // Usar os nomes de campos que o backend espera
                    const response = await fetch('/operacoes/registrar_operacao', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': csrfToken
                        },
                        body: JSON.stringify({
                            numero_container: container,
                            tipo_operacao: 'movimentacao',
                            posicao: posicaoNova,
                            posicao_anterior: posicaoOriginal,
                            modo: 'manual',
                            observacoes: observacoes || ''
                        })
                    });
                    
                    const data = await response.json();
                    console.log('Status da resposta:', response.status);
                    console.log('Response.ok:', response.ok);
                    console.log('Resposta do servidor:', data);
                    console.log('data.success:', data.success);
                    
                    // Verificar se a opera√ß√£o foi bem-sucedida
                    if (data && data.success === true) {
                        // Atualizar o campo de posi√ß√£o original com a nova posi√ß√£o
                        document.getElementById('posicao_original').value = posicaoNova;
                        
                        // Limpar os campos do formul√°rio
                        document.getElementById('posicao_nova').value = '';
                        document.getElementById('observacoes_movimentacao').value = '';
                        
                        // Mostrar mensagem de sucesso
                        Swal.fire({
                            icon: 'success',
                            title: 'Sucesso!',
                            text: data.message || 'Movimenta√ß√£o registrada com sucesso!',
                            confirmButtonColor: '#28a745'
                        }).then(() => {
                            // Voltar para a tela de sele√ß√£o de opera√ß√µes ap√≥s fechar o modal
                            voltarInicio();
                        });
                        
                        // Tentar atualizar a cache local de containers se as fun√ß√µes existirem
                        try {
                            if (typeof atualizarCacheContainers === 'function') {
                                await atualizarCacheContainers();
                            } else if (typeof atualizarContainers === 'function') {
                                await atualizarContainers('geral');
                            } else {
                                console.log('Fun√ß√µes de atualiza√ß√£o de cache n√£o encontradas, continuando...');
                            }
                        } catch (cacheError) {
                            console.warn('Erro ao atualizar cache, mas opera√ß√£o foi bem-sucedida:', cacheError);
                        }
                    } else {
                        // Preparar mensagem de erro detalhada
                        let errorTitle = 'Erro na Movimenta√ß√£o';
                        let errorText = data.error || 'Ocorreu um erro ao processar a movimenta√ß√£o.';
                        let htmlContent = '';
                        
                        // Verificar se h√° sugest√µes de posi√ß√µes
                        if (data.sugestoes && data.sugestoes.length > 0) {
                            htmlContent = `
                                <div class="text-left">
                                    <p>${errorText}</p>
                                    <p><strong>Sugest√µes de posi√ß√µes v√°lidas:</strong></p>
                                    <ul class="text-left">
                                        ${data.sugestoes.map(pos => `<li>${pos}</li>`).join('')}
                                    </ul>
                                </div>
                            `;
                        }
                        
                        // Mostrar mensagem de erro com detalhes
                        Swal.fire({
                            icon: 'error',
                            title: errorTitle,
                            html: htmlContent || errorText,
                            confirmButtonColor: '#dc3545'
                        });
                    }
                } catch (ajaxError) {
                    console.error('Erro na requisi√ß√£o AJAX:', ajaxError);
                    
                    // Mostrar mensagem de erro gen√©rica
                    Swal.fire({
                        icon: 'error',
                        title: 'Erro na Movimenta√ß√£o',
                        text: 'Ocorreu um erro ao processar a movimenta√ß√£o. Tente novamente.',
                        confirmButtonColor: '#dc3545'
                    });
                }
            }
        } catch (error) {
            console.error('Erro ao confirmar movimenta√ß√£o:', error);
            Swal.fire({
                icon: 'error',
                title: 'Erro',
                text: 'Ocorreu um erro ao processar a movimenta√ß√£o. Tente novamente.',
                confirmButtonColor: '#dc3545'
            });
    }
}

// Aguardar o carregamento completo da p√°gina e outros scripts
window.addEventListener('load', function() {
    // Aguardar um pouco mais para garantir que todos os scripts foram carregados
    setTimeout(function() {
        console.log('üîß Aplicando corre√ß√£o para o modal de erro na movimenta√ß√£o...');
        
        // Sobrescrever qualquer fun√ß√£o confirmarMovimentacao existente
        window.confirmarMovimentacao = processarMovimentacao;
        
        // Interceptar o submit do formul√°rio de movimenta√ß√£o
        const formMovimentacao = document.getElementById('formMovimentacao');
        if (formMovimentacao) {
            formMovimentacao.addEventListener('submit', async function(e) {
                e.preventDefault(); // Prevenir o submit padr√£o
                await processarMovimentacao();
            });
        }
        
        console.log('‚úÖ Corre√ß√£o aplicada com sucesso!');
    }, 1000); // Aguardar 1 segundo
});
