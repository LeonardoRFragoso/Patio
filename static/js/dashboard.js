// ========================================
// DASHBOARD SISTEMA DE P√ÅTIO - N√öCLEO MODULAR
// Vers√£o modularizada - apenas orquestra√ß√£o e navega√ß√£o
// Toda l√≥gica espec√≠fica foi movida para m√≥dulos dedicados
// ========================================

/**
 * Estado global simplificado da aplica√ß√£o
 * Mant√©m apenas dados essenciais para sincroniza√ß√£o entre m√≥dulos
 */
const appState = {
  // Opera√ß√£o e modo atuais
  currentOperation: null,
  currentMode: null,
  activeForm: null,
  
  // Cache global para sincroniza√ß√£o entre m√≥dulos
  containersCache: [],
  containersCacheTime: null,
  containersVistoriadosCache: [],
  containersVistoriadosCacheTime: null,
  placasCache: [],
  placasCacheTime: null,
  posicoesLivresCache: null,
  posicoesLivresCacheTime: null,
  
  // Estado de inicializa√ß√£o
  initialized: false
};

// Compatibilidade: manter vari√°vel global para scripts antigos
window.appState = appState;

console.log("üöÄ Iniciando Dashboard modular...");

// ========================================
// MAPEAMENTO DE M√ìDULOS
// ========================================

/**
 * Mapeamento de opera√ß√µes para seus respectivos m√≥dulos
 */
const moduleMap = {
  'descarga': './modules/descarga.js',
  'carregamento': './modules/carregamento.js',
  'movimentacao': './modules/movimentacao.js',
  'consultar': './modules/consulta.js',
  'patio3d': './modules/patio3d.js',
  'correcao-descarga': './modules/correcao-descarga.js'
};

/**
 * Cache de m√≥dulos carregados para evitar reimporta√ß√£o
 */
const loadedModules = new Map();

// ========================================
// CARREGAR UTILIDADES GLOBAIS NECESS√ÅRIAS PARA OS M√ìDULOS
// ========================================

// Expor scroll otimizado para outros m√≥dulos (descarga, movimenta√ß√£o, etc.)
import('./modules/ui-utils.js')
  .then(({ scrollToFormulario }) => {
    if (typeof scrollToFormulario === 'function') {
      window.scrollToFormulario = scrollToFormulario;
      console.log('üîó Fun√ß√£o scrollToFormulario exposta globalmente (dashboard)');
    }
  })
  .catch(err => console.error('‚ùå Falha ao importar ui-utils:', err));

// ========================================
// FUN√á√ïES DE NAVEGA√á√ÉO PRINCIPAL
// ========================================

/**
 * Mostra uma opera√ß√£o espec√≠fica importando seu m√≥dulo
 * @param {string} operation - Nome da opera√ß√£o
 */
async function mostrarOperacao(operation) {
  try {
    console.log(`üì± Mostrando opera√ß√£o: ${operation} (reinicializa√ß√£o completa)`);

    // Limpar estado anterior
    hideAllOperations();
    hideAllForms();
    esconderSelecaoInicial();
    clearPreviousState();

    // Atualizar estado global
    appState.currentOperation = operation;
    appState.currentMode = null;
    appState.activeForm = null;

    // Ativar bot√£o de opera√ß√£o
    activateOperationButton(operation);

    // Importar e inicializar m√≥dulo espec√≠fico
    if (moduleMap[operation]) {
      await importarEInicializarModulo(operation);
    } else {
      console.warn(`‚ö†Ô∏è M√≥dulo n√£o encontrado para opera√ß√£o: ${operation}`);
    }

    // Mostrar se√ß√£o da opera√ß√£o
    setTimeout(() => {
      showOperationSection(operation);
    }, 50);

    console.log(`‚úÖ Opera√ß√£o ${operation} inicializada`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao mostrar opera√ß√£o ${operation}:`, error);
    mostrarErroOperacao(operation, error);
    return false;
  }
}

/**
 * Importa e inicializa um m√≥dulo espec√≠fico
 * @param {string} operation - Nome da opera√ß√£o
 */
async function importarEInicializarModulo(operation) {
  try {
    let modulo;
    
    // Verificar se m√≥dulo j√° foi carregado
    if (loadedModules.has(operation)) {
      modulo = loadedModules.get(operation);
      console.log(`üîÑ Reutilizando m√≥dulo carregado: ${operation}`);
    } else {
      // Importar m√≥dulo dinamicamente
      console.log(`üîå Importando m√≥dulo: ${moduleMap[operation]}`);
      modulo = await import(moduleMap[operation]);
      
      // Cachear m√≥dulo
      loadedModules.set(operation, modulo);
    }
    
    if (modulo && typeof modulo.init === 'function') {
      // SEMPRE reinicializar o m√≥dulo a cada clique
      console.log(`üîÑ Reinicializando m√≥dulo de ${operation}...`);
      modulo.init({ appState });
      
      console.log(`‚úÖ M√≥dulo de ${operation} reinicializado com sucesso`);
    } else {
      throw new Error(`M√≥dulo ${operation} n√£o exp√µe fun√ß√£o 'init'`);
    }
  } catch (error) {
    console.error(`‚ùå Erro ao importar/inicializar m√≥dulo ${operation}:`, error);
    throw error;
  }
}

/**
 * Mostra erro ao carregar opera√ß√£o
 * @param {string} operation - Nome da opera√ß√£o
 * @param {Error} error - Erro ocorrido
 */
function mostrarErroOperacao(operation, error) {
  if (typeof window.mostrarAlerta === 'function') {
    window.mostrarAlerta(
      'Erro ao carregar opera√ß√£o',
      `N√£o foi poss√≠vel carregar a opera√ß√£o ${operation}. Tente novamente.`,
      'error'
    );
  } else {
    alert(`Erro ao carregar opera√ß√£o ${operation}. Tente novamente.`);
  }
}

/**
 * Esconde todas as opera√ß√µes
 */
function hideAllOperations() {
  const operationIds = [
    'operacao-descarga',
    'operacao-carregamento',
    'operacao-movimentacao',
    'operacao-consultar',
    'operacao-patio3d'
  ];
  
  operationIds.forEach(id => {
    const operacao = document.getElementById(id);
    if (operacao) {
      operacao.style.display = 'none';
    }
  });
  
  // Esconder elementos com classe gen√©rica
  document.querySelectorAll('.operacao-content').forEach(op => {
    op.style.display = 'none';
    op.classList.remove('show');
  });
}

/**
 * Mostra uma se√ß√£o de opera√ß√£o espec√≠fica
 * @param {string} operation - Nome da opera√ß√£o
 */
function showOperationSection(operation) {
  console.log(`üîç Tentando mostrar se√ß√£o da opera√ß√£o: ${operation}`);
  
  const operationElement = document.getElementById(`operacao-${operation}`);
  if (operationElement) {
    operationElement.style.display = 'block';
    operationElement.classList.add('show');
    console.log(`‚úÖ Se√ß√£o da opera√ß√£o ${operation} exibida com classe 'show'`);

    // Garantir que o usu√°rio veja a se√ß√£o rec√©m-aberta
    if (typeof window.scrollToFormulario === 'function') {
      console.log(`üìú Preparando scroll para opera√ß√£o ${operation}...`);
      // Pequeno atraso para garantir que o layout foi aplicado
      setTimeout(() => {
        console.log(`üìú Executando scroll para opera√ß√£o ${operation} com alwaysScroll: true`);
        window.scrollToFormulario(operationElement, { 
          offset: 120, 
          alwaysScroll: true // for√ßa scroll mesmo se elemento parecer vis√≠vel
        });
      }, 100);
    } else {
      console.warn(`‚ö†Ô∏è Fun√ß√£o scrollToFormulario n√£o dispon√≠vel para ${operation}`);
    }
  } else {
    console.error(`‚ùå Elemento 'operacao-${operation}' n√£o encontrado no DOM`);
  }
}

/**
 * Esconde todos os formul√°rios
 */
function hideAllForms() {
  const formIds = [
    'form-carregamento-rodoviario',
    'form-carregamento-ferroviario',
    'form-descarga-rodoviaria',
    'form-descarga-ferroviaria',
    'form-movimentacao',
    'form-consulta'
  ];
  
  formIds.forEach(id => {
    const form = document.getElementById(id);
    if (form) {
      form.style.display = 'none';
      form.classList.remove('show');
    }
  });
  
  document.querySelectorAll('.operacao-form').forEach(form => {
    form.style.display = 'none';
    form.classList.remove('show');
  });
}

/**
 * Esconde a sele√ß√£o inicial de opera√ß√µes
 */
function esconderSelecaoInicial() {
  const selecioneOperacao = document.getElementById('selecione-operacao');
  if (selecioneOperacao) {
    selecioneOperacao.style.display = 'none';
  }
}

/**
 * Ativa o bot√£o de opera√ß√£o correspondente
 * @param {string} operation - Nome da opera√ß√£o
 */
function activateOperationButton(operation) {
  // Remover classe ativa de todos os bot√µes
  document.querySelectorAll('.operacao-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  
  // Adicionar classe ativa ao bot√£o selecionado
  const activeButton = document.querySelector(`.operacao-btn[data-operacao="${operation}"]`);
  if (activeButton) {
    activeButton.classList.add('active');
    console.log(`‚úÖ Bot√£o da opera√ß√£o ${operation} ativado`);
  } else {
    console.warn(`‚ö†Ô∏è Bot√£o da opera√ß√£o ${operation} n√£o encontrado`);
  }
}

/**
 * Limpa estado anterior
 */
function clearPreviousState() {
  // Remover classes ativas
  document.querySelectorAll('.operacao-btn, .sub-opcao-btn').forEach(btn => {
    btn.classList.remove('active');
  });
}

/**
 * Exibe a sele√ß√£o inicial de opera√ß√µes
 */
function showInitialSelection() {
  const indicador = document.getElementById('selecione-operacao');
  if (indicador) {
    indicador.style.display = 'block';
  }

  const gridOperacoes = document.querySelector('.operacoes-grid');
  if (gridOperacoes) {
    gridOperacoes.style.display = 'flex';
  }

  console.log('‚úÖ Sele√ß√£o de opera√ß√µes exibida');
}

/**
 * Volta para o in√≠cio (estado inicial)
 */
function voltarInicio() {
  console.log("üè† Voltando ao in√≠cio");

  // Limpar estado
  hideAllOperations();
  hideAllForms();
  clearPreviousState();

  // Resetar appState mantendo cache
  const cacheBackup = {
    containersCache: appState.containersCache,
    containersCacheTime: appState.containersCacheTime,
    containersVistoriadosCache: appState.containersVistoriadosCache,
    containersVistoriadosCacheTime: appState.containersVistoriadosCacheTime,
    placasCache: appState.placasCache,
    placasCacheTime: appState.placasCacheTime,
    posicoesLivresCache: appState.posicoesLivresCache,
    posicoesLivresCacheTime: appState.posicoesLivresCacheTime
  };

  Object.assign(appState, {
    currentOperation: null,
    currentMode: null,
    activeForm: null,
    ...cacheBackup
  });

  // Limpar formul√°rios via m√≥dulo UI se dispon√≠vel
  if (typeof window.clearAllForms === 'function') {
    window.clearAllForms();
  }

  // Mostrar sele√ß√£o inicial
  setTimeout(() => {
    showInitialSelection();
    console.log("‚úÖ Retornado ao estado inicial");
  }, 50);
}

// ========================================
// SISTEMA DE INICIALIZA√á√ÉO MODULAR
// ========================================

/**
 * Inicializa m√≥dulos essenciais
 */
async function inicializarModulosEssenciais() {
  console.log('üîß Inicializando m√≥dulos essenciais...');
  
  try {
    // Importar e inicializar m√≥dulos utilit√°rios
    const modulosEssenciais = [
      './modules/ui-utils.js',
      './modules/containers-utils.js',
      './modules/placas.js',
      './modules/posicoes.js'
    ];

    for (const modulePath of modulosEssenciais) {
      try {
        const modulo = await import(modulePath);
        if (modulo && typeof modulo.init === 'function') {
          modulo.init({ appState });
          console.log(`‚úÖ M√≥dulo essencial carregado: ${modulePath}`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao carregar m√≥dulo essencial ${modulePath}:`, error);
        // Continuar mesmo com erro
      }
    }

    console.log('‚úÖ M√≥dulos essenciais inicializados');
    return true;
  } catch (error) {
    console.error('‚ùå Erro cr√≠tico na inicializa√ß√£o de m√≥dulos:', error);
    return false;
  }
}

/**
 * Inicializa√ß√£o principal da aplica√ß√£o
 */
async function inicializarDashboard() {
  console.log('üöÄ Iniciando inicializa√ß√£o do dashboard...');

  try {
    // Marcar como inicializado
    appState.initialized = true;

    // Inicializar m√≥dulos essenciais
    await inicializarModulosEssenciais();

    // Configurar estado inicial
    resetToInitialState();

    // Log de conclus√£o
    console.log('‚úÖ Dashboard inicializado com sucesso');
    console.log('üìä Estado inicial:', {
      operation: appState.currentOperation,
      mode: appState.currentMode,
      initialized: appState.initialized
    });

    return true;
  } catch (error) {
    console.error('‚ùå Erro cr√≠tico na inicializa√ß√£o do dashboard:', error);
    
    // Mostrar erro ao usu√°rio
    if (typeof window.mostrarAlerta === 'function') {
      window.mostrarAlerta(
        'Erro de Inicializa√ß√£o',
        'Ocorreu um erro ao inicializar o sistema. Recarregue a p√°gina.',
        'error'
      );
    }
    
    return false;
  }
}

/**
 * Reseta para o estado inicial
 */
function resetToInitialState() {
  hideAllOperations();
  hideAllForms();
  esconderSelecaoInicial();
  clearPreviousState();

  // Limpar formul√°rios
  if (typeof window.clearAllForms === 'function') {
    window.clearAllForms();
  }

  setTimeout(() => {
    showInitialSelection();
  }, 50);
}

// ========================================
// FUN√á√ïES DE LOGOUT
// ========================================

/**
 * Confirma e processa o logout do usu√°rio
 */
function confirmarLogout() {
  console.log("üîí Iniciando processo de logout...");
  
  const confirmar = () => {
    if (typeof window.mostrarConfirmacao === 'function') {
      return window.mostrarConfirmacao(
        'Confirmar Sa√≠da',
        'Deseja realmente sair do sistema?'
      );
    } else {
      return Promise.resolve({ 
        isConfirmed: confirm('Deseja realmente sair do sistema?') 
      });
    }
  };

  confirmar().then((result) => {
    if (result.isConfirmed) {
      console.log("‚úÖ Logout confirmado, redirecionando...");
      
      if (typeof window.mostrarAlerta === 'function') {
        window.mostrarAlerta(
          'Saindo...',
          'Voc√™ ser√° redirecionado em instantes',
          'info'
        ).then(() => {
          window.location.href = "/auth/logout";
        });
      } else {
        window.location.href = "/auth/logout";
      }
    } else {
      console.log("‚ùå Logout cancelado");
    }
  });
}

// ========================================
// MONITORAMENTO E DEBUG
// ========================================

/**
 * Monitor de estado para debug (executa a cada 10 segundos)
 */
function iniciarMonitorDebug() {
  setInterval(() => {
    const debugInfo = {
      operation: appState.currentOperation,
      mode: appState.currentMode,
      form: appState.activeForm,
      containersCache: appState.containersCache.length,
      placasCache: appState.placasCache.length,
      modulesLoaded: loadedModules.size,
      timestamp: new Date().toLocaleTimeString()
    };

    if (window.lastDebugInfo !== JSON.stringify(debugInfo)) {
      console.log("üìä Estado do dashboard:", debugInfo);
      window.lastDebugInfo = JSON.stringify(debugInfo);
    }
  }, 10000);
}

// ========================================
// INICIALIZA√á√ÉO AUTOM√ÅTICA
// ========================================

/**
 * Inicializa√ß√£o quando DOM estiver carregado
 */
document.addEventListener("DOMContentLoaded", async function() {
  console.log("üéØ DOM carregado, iniciando dashboard...");

  try {
    // Aguardar inicializa√ß√£o completa
    const sucesso = await inicializarDashboard();

    if (sucesso) {
      // Iniciar monitoramento de debug
      iniciarMonitorDebug();
      
      // Garantir que a sele√ß√£o inicial seja exibida
      setTimeout(() => {
        if (!appState.currentOperation) {
          showInitialSelection();
        }
      }, 500);
      
      console.log("üéâ Dashboard totalmente funcional!");
    } else {
      console.error("üí• Falha na inicializa√ß√£o do dashboard");
    }
  } catch (error) {
    console.error("üí• Erro cr√≠tico durante inicializa√ß√£o:", error);
  }
});

// ========================================
// EXPOSI√á√ÉO DE FUN√á√ïES GLOBAIS
// ========================================

// Fun√ß√µes principais de navega√ß√£o
window.mostrarOperacao = mostrarOperacao;
window.voltarInicio = voltarInicio;
window.resetToInitialState = resetToInitialState;
window.confirmarLogout = confirmarLogout;

// Estado global
window.appState = appState;

// Fun√ß√µes de debug
window.getAppState = () => appState;
window.getLoadedModules = () => loadedModules;
window.clearModuleCache = () => loadedModules.clear();

// Wrapper para compatibilidade com templates antigos
// Permite chamar mostrarSubOpcao("carregamento", "rodoviaria") diretamente do HTML
window.mostrarSubOpcao = function(operacao, modo) {
  try {
    if (operacao === 'carregamento' && typeof window.mostrarSubOpcaoCarregamento === 'function') {
      window.mostrarSubOpcaoCarregamento(modo);
      return;
    }
    if (operacao === 'descarga' && typeof window.mostrarSubOpcaoDescarga === 'function') {
      window.mostrarSubOpcaoDescarga(modo);
      return;
    }
    console.warn('‚ö†Ô∏è mostrarSubOpcao: opera√ß√£o ou fun√ß√£o correspondente n√£o encontrada', operacao, modo);
  } catch (err) {
    console.error('‚ùå Erro em mostrarSubOpcao wrapper:', err);
  }
};

console.log("‚úÖ Dashboard modular carregado e pronto para uso");