// ========================================
// M√ìDULO DE VISUALIZA√á√ÉO 3D DO P√ÅTIO
// Gerencia toda a l√≥gica relacionada √† visualiza√ß√£o 3D do p√°tio de containers
// ========================================

/**
 * Estado interno do m√≥dulo de visualiza√ß√£o 3D
 */
const patio3dState = {
    redirecionandoParaVisualizacao: false,
    parametrosVisualizacao: {},
    initialized: false
  };
  
  /**
   * Inicializa o m√≥dulo de visualiza√ß√£o 3D
   * @param {Object} options - Op√ß√µes de inicializa√ß√£o
   * @param {Object} options.appState - Estado global da aplica√ß√£o
   */
  export function init(options = {}) {
    console.log('üóø Inicializando m√≥dulo de visualiza√ß√£o 3D...');
    
    const { appState } = options;
    
    // SEMPRE reinicializar - remover verifica√ß√£o de inicializa√ß√£o
    if (patio3dState.initialized) {
      console.log('üîÑ Reinicializando m√≥dulo de visualiza√ß√£o 3D...');
    } else {
      console.log('üÜï Primeira inicializa√ß√£o do m√≥dulo de visualiza√ß√£o 3D');
    }
    
    // Configurar estado inicial
    patio3dState.initialized = true;
    
    // Valida√ß√µes antes do redirecionamento
    if (!validarAcessoVisualizacao3D()) {
      return;
    }
    
    // Preparar par√¢metros da visualiza√ß√£o
    prepararParametrosVisualizacao();
    
    // Executar redirecionamento com feedback visual
    executarRedirecionamento();
    
    console.log('‚úÖ M√≥dulo de visualiza√ß√£o 3D inicializado com sucesso');
  }
  
  /**
   * Valida se o usu√°rio pode acessar a visualiza√ß√£o 3D
   * @returns {boolean} Se o acesso √© permitido
   */
  function validarAcessoVisualizacao3D() {
    console.log('üîç Validando acesso √† visualiza√ß√£o 3D...');
    
    // Verificar se o navegador suporta as tecnologias necess√°rias
    if (!verificarSuporteNavegador()) {
      mostrarErroCompatibilidade();
      return false;
    }
    
    // Verificar conectividade b√°sica
    if (!navigator.onLine) {
      mostrarErroConexao();
      return false;
    }
    
    console.log('‚úÖ Acesso √† visualiza√ß√£o 3D validado');
    return true;
  }
  
  /**
   * Verifica se o navegador suporta as tecnologias necess√°rias para 3D
   * @returns {boolean} Se o navegador √© compat√≠vel
   */
  function verificarSuporteNavegador() {
    // Verificar suporte b√°sico para WebGL (necess√°rio para Three.js)
    const canvas = document.createElement('canvas');
    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    
    if (!gl) {
      console.warn('‚ö†Ô∏è WebGL n√£o suportado pelo navegador');
      return false;
    }
    
    // Verificar suporte para ES6 (necess√°rio para m√≥dulos modernos)
    try {
      new Function('(a = 0) => a');
    } catch (e) {
      console.warn('‚ö†Ô∏è ES6 n√£o suportado pelo navegador');
      return false;
    }
    
    console.log('‚úÖ Navegador compat√≠vel com visualiza√ß√£o 3D');
    return true;
  }
  
  /**
   * Prepara par√¢metros para a visualiza√ß√£o 3D
   */
  function prepararParametrosVisualizacao() {
    console.log('üîß Preparando par√¢metros para visualiza√ß√£o 3D...');
    
    // Obter configura√ß√µes do usu√°rio/sess√£o se dispon√≠veis
    const configuracoes = obterConfiguracoesSessao();
    
    // Preparar par√¢metros base
    patio3dState.parametrosVisualizacao = {
      fonte: 'dashboard',
      timestamp: new Date().toISOString(),
      usuario: configuracoes.usuario || 'desconhecido',
      unidade: configuracoes.unidade || 'SUZANO',
      // Par√¢metros espec√≠ficos podem ser adicionados aqui
      // view: 'geral', // vista padr√£o
      // filtros: {}, // filtros aplicados
      // destacar: null // container espec√≠fico para destacar
    };
    
    console.log('‚úÖ Par√¢metros de visualiza√ß√£o preparados:', patio3dState.parametrosVisualizacao);
  }
  
  /**
   * Obt√©m configura√ß√µes da sess√£o atual
   * @returns {Object} Configura√ß√µes dispon√≠veis
   */
  function obterConfiguracoesSessao() {
    const configuracoes = {};
    
    // Tentar obter informa√ß√µes do usu√°rio de v√°rias fontes
    try {
      // Verificar meta tags
      const metaUsuario = document.querySelector('meta[name="user-info"]');
      if (metaUsuario) {
        const userInfo = JSON.parse(metaUsuario.getAttribute('content') || '{}');
        configuracoes.usuario = userInfo.username;
        configuracoes.unidade = userInfo.unidade;
      }
      
      // Verificar vari√°veis globais
      if (window.currentUser) {
        configuracoes.usuario = window.currentUser.username;
        configuracoes.unidade = window.currentUser.unidade;
      }
      
      // Verificar localStorage (se permitido)
      if (typeof Storage !== 'undefined') {
        const userSession = localStorage.getItem('userSession');
        if (userSession) {
          const sessionData = JSON.parse(userSession);
          configuracoes.usuario = configuracoes.usuario || sessionData.username;
          configuracoes.unidade = configuracoes.unidade || sessionData.unidade;
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao obter configura√ß√µes da sess√£o:', error);
    }
    
    return configuracoes;
  }
  
  /**
   * Executa o redirecionamento para a visualiza√ß√£o 3D
   */
  function executarRedirecionamento() {
    console.log('üöÄ Executando redirecionamento para visualiza√ß√£o 3D...');
    
    // Marcar que estamos redirecionando
    patio3dState.redirecionandoParaVisualizacao = true;
    
    // Mostrar feedback visual opcional
    mostrarFeedbackRedirecionamento();
    
    // Registrar analytics se dispon√≠vel
    registrarAcessoVisualizacao3D();
    
    // Construir URL com par√¢metros se necess√°rio
    const urlVisualizacao = construirUrlVisualizacao();
    
    // Pequeno delay para permitir feedback visual
    setTimeout(() => {
      console.log(`üóø Redirecionando para: ${urlVisualizacao}`);
      
      try {
        window.location.href = urlVisualizacao;
      } catch (error) {
        console.error('‚ùå Erro ao redirecionar para visualiza√ß√£o 3D:', error);
        mostrarErroRedirecionamento();
        patio3dState.redirecionandoParaVisualizacao = false;
      }
    }, 500);
  }
  
  /**
   * Constr√≥i a URL da visualiza√ß√£o 3D com par√¢metros
   * @returns {string} URL completa para redirecionamento
   */
  function construirUrlVisualizacao() {
    let url = '/visualizacao_patio';
    
    // Adicionar par√¢metros como query string se necess√°rio
    const params = new URLSearchParams();
    
    // Par√¢metros b√°sicos
    params.set('fonte', patio3dState.parametrosVisualizacao.fonte);
    
    // Par√¢metros opcionais baseados no contexto
    if (patio3dState.parametrosVisualizacao.unidade) {
      params.set('unidade', patio3dState.parametrosVisualizacao.unidade);
    }
    
    // Se houver par√¢metros, adicionar √† URL
    const queryString = params.toString();
    if (queryString) {
      url += `?${queryString}`;
    }
    
    return url;
  }
  
  /**
   * Mostra feedback visual durante o redirecionamento
   */
  function mostrarFeedbackRedirecionamento() {
    // Criar overlay de loading simples
    const overlay = document.createElement('div');
    overlay.id = 'patio3d-loading-overlay';
    overlay.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      color: white;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 10000;
      font-family: Arial, sans-serif;
    `;
    
    overlay.innerHTML = `
      <div style="text-align: center;">
        <div style="font-size: 3rem; margin-bottom: 1rem;">üóø</div>
        <h3 style="margin: 0 0 1rem 0;">Carregando Visualiza√ß√£o 3D</h3>
        <p style="margin: 0; opacity: 0.8;">Redirecionando para o p√°tio virtual...</p>
        <div style="margin-top: 2rem;">
          <div style="width: 40px; height: 40px; border: 4px solid #ffffff30; border-top: 4px solid #ffffff; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto;"></div>
        </div>
      </div>
      <style>
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      </style>
    `;
    
    document.body.appendChild(overlay);
    
    // Remover overlay ap√≥s timeout de seguran√ßa (caso o redirecionamento falhe)
    setTimeout(() => {
      const existingOverlay = document.getElementById('patio3d-loading-overlay');
      if (existingOverlay) {
        existingOverlay.remove();
      }
    }, 5000);
  }
  
  /**
   * Registra o acesso √† visualiza√ß√£o 3D para analytics
   */
  function registrarAcessoVisualizacao3D() {
    try {
      // Registrar evento no console para debugging
      console.log('üìä Acesso √† visualiza√ß√£o 3D registrado:', {
        timestamp: new Date().toISOString(),
        usuario: patio3dState.parametrosVisualizacao.usuario,
        unidade: patio3dState.parametrosVisualizacao.unidade,
        fonte: 'dashboard'
      });
      
      // Integra√ß√£o futura com analytics (Google Analytics, etc.)
      if (typeof gtag === 'function') {
        gtag('event', 'visualizacao_3d_acesso', {
          'event_category': 'navegacao',
          'event_label': 'dashboard_to_3d',
          'custom_map.unidade': patio3dState.parametrosVisualizacao.unidade
        });
      }
      
      // Integra√ß√£o futura com analytics interno
      if (typeof window.analytics === 'object' && window.analytics.track) {
        window.analytics.track('Visualiza√ß√£o 3D Acessada', {
          fonte: 'dashboard',
          unidade: patio3dState.parametrosVisualizacao.unidade,
          timestamp: new Date().toISOString()
        });
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao registrar analytics:', error);
    }
  }
  
  /**
   * Mostra erro de compatibilidade do navegador
   */
  function mostrarErroCompatibilidade() {
    Swal.fire({
      icon: 'warning',
      title: 'Navegador Incompat√≠vel',
      html: `
        <p>Seu navegador n√£o suporta as tecnologias necess√°rias para a visualiza√ß√£o 3D.</p>
        <p><strong>Requisitos:</strong></p>
        <ul style="text-align: left; display: inline-block;">
          <li>WebGL habilitado</li>
          <li>JavaScript ES6+ suportado</li>
          <li>Navegador moderno (Chrome 60+, Firefox 60+, Safari 12+)</li>
        </ul>
        <p>Por favor, atualize seu navegador ou use um navegador compat√≠vel.</p>
      `,
      confirmButtonText: 'Entendi',
      confirmButtonColor: '#3085d6',
      footer: '<a href="https://get.webgl.org/" target="_blank">Testar suporte WebGL</a>'
    });
  }
  
  /**
   * Mostra erro de conex√£o
   */
  function mostrarErroConexao() {
    Swal.fire({
      icon: 'error',
      title: 'Sem Conex√£o',
      text: 'A visualiza√ß√£o 3D requer conex√£o com a internet. Verifique sua conex√£o e tente novamente.',
      confirmButtonText: 'Tentar Novamente',
      confirmButtonColor: '#3085d6',
      showCancelButton: true,
      cancelButtonText: 'Cancelar'
    }).then((result) => {
      if (result.isConfirmed) {
        // Tentar novamente
        init();
      }
    });
  }
  
  /**
   * Mostra erro de redirecionamento
   */
  function mostrarErroRedirecionamento() {
    Swal.fire({
      icon: 'error',
      title: 'Erro ao Carregar Visualiza√ß√£o 3D',
      html: `
        <p>N√£o foi poss√≠vel carregar a visualiza√ß√£o 3D do p√°tio.</p>
        <p>Poss√≠veis causas:</p>
        <ul style="text-align: left; display: inline-block;">
          <li>Problema de conectividade</li>
          <li>Servi√ßo temporariamente indispon√≠vel</li>
          <li>Configura√ß√£o do navegador</li>
        </ul>
      `,
      confirmButtonText: 'Tentar Novamente',
      confirmButtonColor: '#3085d6',
      showCancelButton: true,
      cancelButtonText: 'Voltar ao Dashboard'
    }).then((result) => {
      if (result.isConfirmed) {
        // Tentar carregar novamente
        executarRedirecionamento();
      } else {
        // Voltar ao dashboard
        voltarAoDashboard();
      }
    });
  }
  
  /**
   * Volta ao dashboard principal
   */
  function voltarAoDashboard() {
    if (typeof window.voltarInicio === 'function') {
      window.voltarInicio();
    } else {
      // Remover overlay se existir
      const overlay = document.getElementById('patio3d-loading-overlay');
      if (overlay) {
        overlay.remove();
      }
      
      // Resetar estado
      patio3dState.redirecionandoParaVisualizacao = false;
      
      console.log('üè† Retornando ao dashboard principal');
    }
  }
  
  /**
   * Fun√ß√£o de cleanup para o m√≥dulo
   */
  export function cleanup() {
    console.log('üßπ Limpando m√≥dulo de visualiza√ß√£o 3D...');
    
    // Remover overlay se existir
    const overlay = document.getElementById('patio3d-loading-overlay');
    if (overlay) {
      overlay.remove();
    }
    
    // Resetar estado
    patio3dState.redirecionandoParaVisualizacao = false;
    patio3dState.parametrosVisualizacao = {};
    patio3dState.initialized = false;
    
    console.log('‚úÖ M√≥dulo de visualiza√ß√£o 3D limpo');
  }
  
  // ========================================
  // FUN√á√ïES P√öBLICAS PARA USO GLOBAL
  // ========================================
  
  /**
   * Fun√ß√£o global para redirecionamento direto (compatibilidade)
   */
  function redirecionarParaVisualizacao3D() {
    console.log('üóø Redirecionamento direto para visualiza√ß√£o 3D solicitado');
    init();
  }
  
  // Expor fun√ß√µes necess√°rias globalmente para compatibilidade
  window.redirecionarParaVisualizacao3D = redirecionarParaVisualizacao3D;
  
  console.log('‚úÖ M√≥dulo de visualiza√ß√£o 3D carregado');