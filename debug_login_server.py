import sqlite3
from werkzeug.security import check_password_hash
import sys
import os

# Adicionar o diret√≥rio do projeto ao path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def debug_login_server():
    print('=== DEBUG DETALHADO DO SERVIDOR DE LOGIN ===\n')
    
    # Simular exatamente o que o servidor faz
    username = "LeoFragoso"
    password = "Leo@2025"
    role = "user"
    
    print(f'üìã DADOS RECEBIDOS:')
    print(f'   username: {username}')
    print(f'   password: {password}')
    print(f'   role: {role}')
    
    # Passo 1: Valida√ß√£o b√°sica (como no c√≥digo)
    print(f'\nüîç PASSO 1: VALIDA√á√ÉO B√ÅSICA')
    campos_validos = bool(username and username.strip() and password)
    print(f'   Campos v√°lidos: {"‚úÖ SIM" if campos_validos else "‚ùå N√ÉO"}')
    
    if not campos_validos:
        print('‚ùå FALHA: Campos obrigat√≥rios n√£o preenchidos')
        return
    
    # Passo 2: Verificar tentativas de for√ßa bruta (simulado)
    print(f'\nüîç PASSO 2: VERIFICAR TENTATIVAS DE FOR√áA BRUTA')
    print(f'   Simulando track_login_attempt("{username}")...')
    # Como n√£o temos a tabela login_attempts, assumimos que est√° permitido
    allowed = True
    print(f'   Tentativas permitidas: {"‚úÖ SIM" if allowed else "‚ùå N√ÉO"}')
    
    # Passo 3: Verificar credenciais (fun√ß√£o verificar_credenciais)
    print(f'\nüîç PASSO 3: VERIFICAR CREDENCIAIS')
    
    try:
        conn = sqlite3.connect('database.db')
        conn.row_factory = sqlite3.Row  # Para acessar colunas por nome
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM usuarios WHERE username = ?", (username,))
        user = cursor.fetchone()
        
        if not user:
            print('‚ùå FALHA: Usu√°rio n√£o encontrado')
            return
        
        print(f'   Usu√°rio encontrado: ‚úÖ SIM (ID: {user["id"]})')
        
        # Verificar senha
        password_valid = check_password_hash(user['password_hash'], password)
        print(f'   Senha v√°lida: {"‚úÖ SIM" if password_valid else "‚ùå N√ÉO"}')
        
        if not password_valid:
            print('‚ùå FALHA: Senha inv√°lida')
            return
        
        # Passo 4: Verificar correspond√™ncia de perfil
        print(f'\nüîç PASSO 4: VERIFICAR CORRESPOND√äNCIA DE PERFIL')
        
        user_role = user['nivel']
        NIVEL_OPERADOR = 'operador'
        NIVEL_VISTORIADOR = 'vistoriador'
        NIVEL_ADMIN = 'admin'
        
        print(f'   role do formul√°rio: "{role}"')
        print(f'   user_role do banco: "{user_role}"')
        
        # L√≥gica EXATA do c√≥digo auth/routes.py
        profile_match = True
        error_msg = ""
        
        if role == 'user' and user_role != NIVEL_OPERADOR:
            profile_match = False
            error_msg = f'Aba "user" requer n√≠vel "operador", mas usu√°rio tem "{user_role}"'
        elif role == 'inspector' and user_role != NIVEL_VISTORIADOR:
            profile_match = False
            error_msg = f'Aba "inspector" requer n√≠vel "vistoriador", mas usu√°rio tem "{user_role}"'
        elif role == 'admin' and user_role != NIVEL_ADMIN and user_role != 'admin_administrativo':
            profile_match = False
            error_msg = f'Aba "admin" requer n√≠vel "admin" ou "admin_administrativo", mas usu√°rio tem "{user_role}"'
        
        print(f'   Correspond√™ncia de perfil: {"‚úÖ SIM" if profile_match else "‚ùå N√ÉO"}')
        
        if not profile_match:
            print(f'   Erro: {error_msg}')
            print('‚ùå FALHA: Acesso negado - perfil n√£o corresponde √† aba')
            return
        
        # Passo 5: Login bem-sucedido (simula√ß√£o)
        print(f'\nüîç PASSO 5: CONFIGURA√á√ÉO DE LOGIN')
        
        # Simular reset_login_attempts
        print(f'   reset_login_attempts("{username}"): ‚úÖ OK')
        
        # Simular atualizar_ultimo_login
        print(f'   atualizar_ultimo_login({user["id"]}): ‚úÖ OK')
        
        # Simular configurar_sessao_usuario
        session_data = {
            'username': user['username'],
            'user_id': user['id'],
            'role': user['nivel'],
            'nivel': user['nivel'],
            'unidade': user['unidade'],
            'logged_in': True
        }
        
        print(f'   configurar_sessao_usuario: ‚úÖ OK')
        print(f'     Dados da sess√£o: {session_data}')
        
        # Simular log_auth_activity
        print(f'   log_auth_activity("{username}", "LOGIN", "Login realizado com sucesso"): ‚úÖ OK')
        
        # Simular redirecionar_por_nivel
        print(f'\nüîç PASSO 6: REDIRECIONAMENTO')
        
        if user_role == NIVEL_ADMIN:
            redirect_url = 'admin.admin_dashboard'
        elif user_role == 'admin_administrativo':
            redirect_url = 'admin.admin_administrativo_dashboard'
        elif user_role == NIVEL_VISTORIADOR:
            redirect_url = 'auth.dashboard (tipo=vistoriador)'
        else:
            redirect_url = 'auth.dashboard'
        
        print(f'   redirecionar_por_nivel("{user_role}"): {redirect_url}')
        
        print(f'\nüéâ RESULTADO FINAL:')
        print(f'   ‚úÖ TODAS AS VALIDA√á√ïES PASSARAM!')
        print(f'   ‚úÖ LOGIN DEVERIA SER BEM-SUCEDIDO!')
        print(f'   ‚úÖ REDIRECIONAMENTO PARA: {redirect_url}')
        
        # Verificar se h√° algum problema espec√≠fico
        print(f'\nüîç VERIFICA√á√ïES ADICIONAIS:')
        
        # Verificar se h√° campos None que podem causar problemas
        problematic_fields = []
        for field in ['username', 'nivel', 'unidade']:
            if not user[field]:
                problematic_fields.append(field)
        
        if problematic_fields:
            print(f'   ‚ö†Ô∏è Campos problem√°ticos (None/vazios): {problematic_fields}')
        else:
            print(f'   ‚úÖ Todos os campos essenciais preenchidos')
        
        conn.close()
        
    except Exception as e:
        print(f'‚ùå ERRO DURANTE VERIFICA√á√ÉO: {e}')
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_login_server()
