import sqlite3

def fix_user_level():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    
    # Verificar n√≠vel atual
    cursor.execute('SELECT username, nivel FROM usuarios WHERE username = ?', ('LeoFragoso',))
    user = cursor.fetchone()
    
    if user:
        print(f'=== USU√ÅRIO ENCONTRADO ===')
        print(f'Username: {user[0]}')
        print(f'N√≠vel atual: {user[1]}')
        
        if user[1] == 'user':
            print('\nüîß CORRIGINDO N√çVEL DE "user" PARA "operador"...')
            
            # Atualizar n√≠vel para operador
            cursor.execute('UPDATE usuarios SET nivel = ? WHERE username = ?', ('operador', 'LeoFragoso'))
            conn.commit()
            
            # Verificar se foi atualizado
            cursor.execute('SELECT username, nivel FROM usuarios WHERE username = ?', ('LeoFragoso',))
            updated_user = cursor.fetchone()
            
            if updated_user and updated_user[1] == 'operador':
                print('‚úÖ SUCESSO! N√≠vel atualizado para "operador"')
                print(f'Novo n√≠vel: {updated_user[1]}')
            else:
                print('‚ùå ERRO: Falha ao atualizar n√≠vel')
        else:
            print(f'‚ÑπÔ∏è N√≠vel j√° √© "{user[1]}" - n√£o precisa alterar')
    else:
        print('‚ùå Usu√°rio LeoFragoso n√£o encontrado')
    
    # Mostrar todos os n√≠veis v√°lidos no sistema
    print('\n=== N√çVEIS V√ÅLIDOS NO SISTEMA ===')
    cursor.execute('SELECT DISTINCT nivel FROM usuarios ORDER BY nivel')
    niveis = cursor.fetchall()
    for nivel in niveis:
        print(f'- {nivel[0]}')
    
    conn.close()

if __name__ == "__main__":
    fix_user_level()
