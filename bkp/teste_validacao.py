"""
Script para testar os novos endpoints de valida√ß√£o de posi√ß√µes do p√°tio de Floriano.
"""

import requests
import json

# Configura√ß√µes
BASE_URL = 'http://127.0.0.1:8505'
HEADERS = {'Content-Type': 'application/json'}

def testar_endpoint_validacao():
    """Testa o endpoint /validar_posicao"""
    print("üß™ TESTANDO ENDPOINT /validar_posicao")
    print("=" * 50)
    
    # Simula√ß√£o de testes sem login (deve retornar erro 401)
    url = f"{BASE_URL}/validar_posicao"
    
    testes = [
        {"posicao": "A01-1", "status": "CHEIO", "operacao": "descarga"},
        {"posicao": "C01-4", "status": "CHEIO", "operacao": "descarga"},
        {"posicao": "A01-1", "status": "VAZIO", "operacao": "movimentacao"},
        {"posicao": "X999", "status": "CHEIO", "operacao": "descarga"},  # Posi√ß√£o inv√°lida
    ]
    
    for i, teste in enumerate(testes, 1):
        print(f"\nüîç Teste {i}: {teste}")
        try:
            response = requests.post(url, json=teste, headers=HEADERS, timeout=5)
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 401:
                print("   ‚ùå Erro de autentica√ß√£o (esperado sem login)")
            else:
                data = response.json()
                print(f"   Resposta: {data}")
                
        except Exception as e:
            print(f"   ‚ùå Erro na requisi√ß√£o: {e}")

def testar_endpoint_sugestoes():
    """Testa o endpoint /sugestoes_posicoes"""
    print("\n\nüß™ TESTANDO ENDPOINT /sugestoes_posicoes")
    print("=" * 50)
    
    # Simula√ß√£o de testes sem login (deve retornar erro 401)
    url = f"{BASE_URL}/sugestoes_posicoes"
    
    testes = [
        {"status": "CHEIO"},
        {"status": "VAZIO"},
        {"status": "CHEIO", "baia": "A"},
        {"status": "VAZIO", "altura_max": "3"},
    ]
    
    for i, teste in enumerate(testes, 1):
        params = "&".join([f"{k}={v}" for k, v in teste.items()])
        test_url = f"{url}?{params}"
        
        print(f"\nüîç Teste {i}: {teste}")
        print(f"   URL: {test_url}")
        
        try:
            response = requests.get(test_url, timeout=5)
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 401:
                print("   ‚ùå Erro de autentica√ß√£o (esperado sem login)")
            else:
                data = response.json()
                print(f"   Resposta: {data}")
                
        except Exception as e:
            print(f"   ‚ùå Erro na requisi√ß√£o: {e}")

def testar_funcoes_diretas():
    """Testa as fun√ß√µes do m√≥dulo posicoes_floriano diretamente"""
    print("\n\nüß™ TESTANDO FUN√á√ïES DIRETAS DO M√ìDULO")
    print("=" * 50)
    
    try:
        import sys
        import os
        sys.path.append(os.path.dirname(__file__))
        
        from posicoes_floriano import patio_floriano
        
        # Testes de valida√ß√£o
        print("\nüìã Testes de Valida√ß√£o:")
        testes_validacao = [
            ("A01-1", "CHEIO"),
            ("A01-1", "VAZIO"),
            ("C01-4", "CHEIO"),  # Deve ser inv√°lido (apenas VAZIO)
            ("C01-4", "VAZIO"),  # Deve ser v√°lido
            ("X999", "CHEIO"),  # Posi√ß√£o inexistente
        ]
        
        for posicao, status in testes_validacao:
            resultado = patio_floriano.validar_operacao(posicao, status)
            emoji = "‚úÖ" if resultado['valido'] else "‚ùå"
            print(f"   {emoji} {posicao} + {status}: {resultado['mensagem']}")
            if not resultado['valido'] and resultado.get('sugestoes'):
                print(f"      üí° Sugest√µes: {', '.join(resultado['sugestoes'][:3])}")
        
        # Testes de sugest√µes
        print("\nüí° Testes de Sugest√µes:")
        
        sugestoes_cheio = patio_floriano.sugerir_posicoes_para_container("CHEIO")
        print(f"   Primeiras 5 posi√ß√µes para CHEIO: {', '.join(sugestoes_cheio[:5])}")
        
        sugestoes_vazio = patio_floriano.sugerir_posicoes_para_container("VAZIO")
        print(f"   Primeiras 5 posi√ß√µes para VAZIO: {', '.join(sugestoes_vazio[:5])}")
        
        # Sugest√µes filtradas
        sugestoes_baia_a = patio_floriano.sugerir_posicoes_para_container("CHEIO", baia_preferida="A")
        print(f"   Primeiras 5 posi√ß√µes CHEIO na baia A: {', '.join(sugestoes_baia_a[:5])}")
        
        sugestoes_altura_max = patio_floriano.sugerir_posicoes_para_container("VAZIO", altura_maxima=2)
        print(f"   Primeiras 5 posi√ß√µes VAZIO at√© altura 2: {', '.join(sugestoes_altura_max[:5])}")
        
        # Estat√≠sticas
        stats = patio_floriano.obter_estatisticas_patio()
        print(f"\nüìä Estat√≠sticas do P√°tio:")
        print(f"   Total de posi√ß√µes: {stats['total_posicoes']}")
        print(f"   Posi√ß√µes CHEIO/VAZIO: {stats['posicoes_cheio_vazio']}")
        print(f"   Posi√ß√µes apenas VAZIO: {stats['posicoes_apenas_vazio']}")
        print(f"   Baias dispon√≠veis: {', '.join(stats['baias_disponiveis'])}")
        
        print("\n‚úÖ Todos os testes diretos foram executados com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro nos testes diretos: {e}")
        import traceback
        traceback.print_exc()

def main():
    print("üöÄ INICIANDO TESTES DE VALIDA√á√ÉO DO P√ÅTIO DE FLORIANO")
    print("=" * 60)
    
    # Testar fun√ß√µes diretas primeiro
    testar_funcoes_diretas()
    
    # Testar endpoints (v√£o dar erro 401 sem login, mas confirma que est√£o funcionando)
    testar_endpoint_validacao()
    testar_endpoint_sugestoes()
    
    print("\n" + "=" * 60)
    print("üéØ RESUMO DOS TESTES:")
    print("‚úÖ M√≥dulo posicoes_floriano carregado e funcionando")
    print("‚úÖ Fun√ß√µes de valida√ß√£o operacionais")
    print("‚úÖ Fun√ß√µes de sugest√£o operacionais") 
    print("‚úÖ Endpoints criados (requerem autentica√ß√£o)")
    print("\nüí° Para testar os endpoints completos, fa√ßa login no sistema!")

if __name__ == "__main__":
    main()
