#!/usr/bin/env python3
"""
Teste para verificar o problema na valida√ß√£o dupla (CHEIO e VAZIO)
que pode estar permitindo containers flutuantes.
"""

import sys
import os
import sqlite3
from datetime import datetime

# Adicionar o diret√≥rio backend ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from posicoes_suzano import patio_suzano

def testar_validacao_dupla():
    """Testa a valida√ß√£o dupla CHEIO/VAZIO para container flutuante"""
    print("üß™ TESTE DE VALIDA√á√ÉO DUPLA (CHEIO/VAZIO)")
    print("=" * 50)
    
    # Conectar ao banco
    db = sqlite3.connect('database.db')
    
    # Posi√ß√£o de teste: A01-2 (altura 2 sem suporte)
    posicao_teste = 'A01-2'
    
    print(f"\nüìç TESTANDO POSI√á√ÉO: {posicao_teste}")
    
    # Verificar se A01-1 est√° vazia
    cursor = db.cursor()
    cursor.execute('SELECT COUNT(*) FROM containers WHERE posicao_atual = ?', ('A01-1',))
    count_a01_1 = cursor.fetchone()[0]
    print(f"- Containers em A01-1 (suporte): {count_a01_1}")
    
    # Testar valida√ß√£o para container CHEIO
    print(f"\nüîç VALIDA√á√ÉO PARA CONTAINER CHEIO:")
    resultado_cheio = patio_suzano.validar_operacao(
        posicao=posicao_teste,
        status_container='CHEIO',
        db_connection=db,
        tamanho_teu=20
    )
    
    print(f"- V√°lido: {resultado_cheio['valido']}")
    print(f"- Mensagem: {resultado_cheio['mensagem']}")
    
    # Testar valida√ß√£o para container VAZIO
    print(f"\nüîç VALIDA√á√ÉO PARA CONTAINER VAZIO:")
    resultado_vazio = patio_suzano.validar_operacao(
        posicao=posicao_teste,
        status_container='VAZIO',
        db_connection=db,
        tamanho_teu=20
    )
    
    print(f"- V√°lido: {resultado_vazio['valido']}")
    print(f"- Mensagem: {resultado_vazio['mensagem']}")
    
    # Simular a l√≥gica do backend
    print(f"\nü§ñ L√ìGICA DO BACKEND:")
    print(f"- Resultado CHEIO v√°lido: {resultado_cheio['valido']}")
    print(f"- Resultado VAZIO v√°lido: {resultado_vazio['valido']}")
    
    # A l√≥gica atual: se QUALQUER um for v√°lido, aceita
    operacao_aceita = resultado_cheio['valido'] or resultado_vazio['valido']
    print(f"- Opera√ß√£o seria aceita: {operacao_aceita}")
    
    # An√°lise do problema
    print(f"\nüìä AN√ÅLISE:")
    if not resultado_cheio['valido'] and not resultado_vazio['valido']:
        print("‚úÖ CORRETO: Ambas valida√ß√µes falharam, opera√ß√£o rejeitada")
        return False
    elif resultado_cheio['valido'] and resultado_vazio['valido']:
        print("‚úÖ CORRETO: Ambas valida√ß√µes passaram, opera√ß√£o aceita")
        return False
    elif not resultado_cheio['valido'] and resultado_vazio['valido']:
        print("‚ùå PROBLEMA: Valida√ß√£o CHEIO falhou (container flutuante)")
        print("‚ùå          mas valida√ß√£o VAZIO passou, opera√ß√£o aceita!")
        print("‚ùå          Isso permite containers flutuantes!")
        return True
    elif resultado_cheio['valido'] and not resultado_vazio['valido']:
        print("‚ùå PROBLEMA: Valida√ß√£o VAZIO falhou")
        print("‚ùå          mas valida√ß√£o CHEIO passou, opera√ß√£o aceita!")
        return True
    
    return False

def verificar_posicoes_vazias():
    """Verifica se posi√ß√µes VAZIO t√™m regras diferentes para containers flutuantes"""
    print("\n" + "=" * 50)
    print("üß™ VERIFICA√á√ÉO DE REGRAS PARA POSI√á√ïES VAZIO")
    print("=" * 50)
    
    db = sqlite3.connect('database.db')
    
    # Verificar se posi√ß√µes VAZIO t√™m valida√ß√£o de container flutuante
    posicoes_teste = ['A01-2', 'A01-3', 'A01-4', 'A01-5']
    
    for posicao in posicoes_teste:
        print(f"\nüìç TESTANDO: {posicao}")
        
        # Verificar valida√ß√£o de container flutuante diretamente
        resultado_flutuante = patio_suzano.verificar_container_flutuante(posicao, db)
        print(f"- √â flutuante: {resultado_flutuante['flutuante']}")
        
        # Verificar valida√ß√£o completa para VAZIO
        resultado_vazio = patio_suzano.validar_operacao(
            posicao=posicao,
            status_container='VAZIO',
            db_connection=db,
            tamanho_teu=20
        )
        print(f"- Valida√ß√£o VAZIO: {resultado_vazio['valido']}")
        print(f"- Mensagem: {resultado_vazio['mensagem']}")
        
        if resultado_flutuante['flutuante'] and resultado_vazio['valido']:
            print("‚ùå PROBLEMA: Container flutuante mas valida√ß√£o VAZIO passou!")

if __name__ == "__main__":
    print("üî¨ TESTE DE VALIDA√á√ÉO DUPLA PARA CONTAINERS FLUTUANTES")
    print("=" * 60)
    
    # Teste principal
    tem_problema = testar_validacao_dupla()
    
    # Verifica√ß√£o adicional
    verificar_posicoes_vazias()
    
    print("\n" + "=" * 60)
    print("üìã CONCLUS√ÉO:")
    if tem_problema:
        print("‚ùå PROBLEMA IDENTIFICADO: A valida√ß√£o dupla permite containers flutuantes!")
        print("   Solu√ß√£o: A valida√ß√£o de container flutuante deve ser aplicada")
        print("   independentemente do status (CHEIO ou VAZIO).")
    else:
        print("‚úÖ Valida√ß√£o funcionando corretamente.")
