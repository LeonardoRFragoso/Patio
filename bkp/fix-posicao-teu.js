/**
 * fix-posicao-teu.js
 * Sistema de valida√ß√£o de posi√ß√µes por TEU (Twenty-foot Equivalent Unit)
 * - Containers de 20 p√©s s√≥ podem ocupar posi√ß√µes √≠mpares (A01, A03, etc.)
 * - Containers de 40 p√©s s√≥ podem ocupar posi√ß√µes pares (A02, A04, etc.)
 * Vers√£o modular e compat√≠vel com dashboard.html
 */

// ========================================
// CONFIGURA√á√ïES E CONSTANTES
// ========================================

// Prote√ß√£o contra redeclara√ß√£o
if (typeof window.TEU_CONFIG !== 'undefined') {
  console.warn('‚ö†Ô∏è TEU_CONFIG j√° foi declarado, pulando redeclara√ß√£o');
  // Usar configura√ß√£o existente
  var TEU_CONFIG = window.TEU_CONFIG;
} else {

const TEU_CONFIG = {
  // Tamanhos de container suportados
  CONTAINER_20_PES: 20,
  CONTAINER_40_PES: 40,
  
  // Padr√£o de posi√ß√£o (A01-1 format)
  POSICAO_PATTERN: /^[A-E](0[1-9]|1[0-9]|20)-[1-5]$/,
  
  // Campos de posi√ß√£o para monitorar
  CAMPOS_POSICAO: [
    'posicao_descarga',
    'posicao_nova',
    'posicao_movimentacao'
  ],
  
  // Configura√ß√µes de UI
  SHOW_ALERTS: true,
  AUTO_VALIDATE: true,
  ENABLE_DEBUG: false
};

// Exportar configura√ß√£o globalmente
window.TEU_CONFIG = TEU_CONFIG;
}

// ========================================
// CLASSE PRINCIPAL DE VALIDA√á√ÉO TEU
// ========================================

class ValidadorTEU {
  constructor(config = {}) {
    this.config = { ...TEU_CONFIG, ...config };
    this.camposMonitorados = new Set();
    this.isInitialized = false;
    
    // Bind methods
    this.validarCampo = this.validarCampo.bind(this);
    this.handleInput = this.handleInput.bind(this);
  }

  /**
   * Inicializa o validador
   */
  initialize() {
    if (this.isInitialized) {
      this.log('‚ö†Ô∏è ValidadorTEU j√° inicializado');
      return;
    }

    this.log('üöÄ Inicializando ValidadorTEU...');

    try {
      // Configurar valida√ß√£o para todos os campos de posi√ß√£o
      this.setupValidationForAllFields();
      
      // Configurar observador para novos campos
      this.setupMutationObserver();
      
      this.isInitialized = true;
      this.log('‚úÖ ValidadorTEU inicializado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao inicializar ValidadorTEU:', error);
    }
  }

  /**
   * Configura valida√ß√£o para todos os campos de posi√ß√£o
   */
  setupValidationForAllFields() {
    this.config.CAMPOS_POSICAO.forEach(campoId => {
      const campo = document.getElementById(campoId);
      if (campo && !this.camposMonitorados.has(campo)) {
        this.setupFieldValidation(campo);
        this.camposMonitorados.add(campo);
        this.log(`‚úÖ Valida√ß√£o TEU configurada para campo: ${campoId}`);
      }
    });
  }

  /**
   * Configura valida√ß√£o para um campo espec√≠fico
   */
  setupFieldValidation(campo) {
    // Remover listeners existentes para evitar duplica√ß√£o
    campo.removeEventListener('input', this.handleInput);
    campo.removeEventListener('blur', this.validarCampo);
    
    // Adicionar novos listeners
    campo.addEventListener('input', this.handleInput);
    campo.addEventListener('blur', this.validarCampo);
    
    // Marcar campo como monitorado
    campo.dataset.teuValidation = 'active';
  }

  /**
   * Handler para evento de input
   */
  handleInput(event) {
    const campo = event.target;
    const valor = campo.value.trim().toUpperCase();
    
    // Converter para mai√∫sculas automaticamente
    campo.value = valor;
    
    // Validar se h√° valor
    if (valor.length > 0) {
      this.validarPosicaoTEU(campo, valor);
    } else {
      this.limparValidacao(campo);
    }
  }

  /**
   * Valida posi√ß√£o TEU para um campo
   */
  validarPosicaoTEU(campo, posicao) {
    // Verificar formato b√°sico
    if (!this.config.POSICAO_PATTERN.test(posicao)) {
      this.aplicarValidacao(campo, false, 'Formato inv√°lido');
      return false;
    }

    // Obter tamanho do container
    const tamanhoContainer = this.obterTamanhoContainer();
    if (!tamanhoContainer) {
      this.log('‚ö†Ô∏è Tamanho do container n√£o dispon√≠vel');
      return true; // N√£o bloquear se n√£o conseguir determinar o tamanho
    }

    // Validar regra TEU
    const resultado = this.validarRegraTEU(posicao, tamanhoContainer);
    this.aplicarValidacao(campo, resultado.valido, resultado.mensagem, tamanhoContainer);
    
    return resultado.valido;
  }

  /**
   * Valida regra TEU espec√≠fica
   */
  validarRegraTEU(posicao, tamanhoTEU) {
    // Extrair n√∫mero da baia
    const baia = parseInt(posicao.substring(1, 3), 10);
    const ehPar = baia % 2 === 0;
    
    // Aplicar regras TEU
    const posicaoValida = (tamanhoTEU === 20 && !ehPar) || (tamanhoTEU === 40 && ehPar);
    
    if (posicaoValida) {
      return {
        valido: true,
        mensagem: 'Posi√ß√£o compat√≠vel com o tamanho do container'
      };
    } else {
      return {
        valido: false,
        mensagem: `Container de ${tamanhoTEU} p√©s deve ocupar posi√ß√£o ${tamanhoTEU === 20 ? '√≠mpar' : 'par'}`
      };
    }
  }

  /**
   * Obt√©m tamanho do container atual
   */
  obterTamanhoContainer() {
    // Verificar se h√° container selecionado globalmente
    if (window.containerSelecionado && window.containerSelecionado.tamanho) {
      return parseInt(window.containerSelecionado.tamanho, 10);
    }
    
    // Verificar elemento de informa√ß√µes do container
    const containerInfo = document.getElementById('container-info');
    if (containerInfo) {
      const textoInfo = containerInfo.textContent || '';
      
      // Procurar por indica√ß√µes de tamanho
      if (textoInfo.includes('40') || textoInfo.includes('40\'')) {
        return 40;
      } else if (textoInfo.includes('20') || textoInfo.includes('20\'')) {
        return 20;
      }
    }
    
    // Verificar dados do container em outros elementos
    const containerNumero = document.querySelector('[data-container-size]');
    if (containerNumero) {
      return parseInt(containerNumero.dataset.containerSize, 10);
    }
    
    return null;
  }

  /**
   * Aplica valida√ß√£o visual ao campo
   */
  aplicarValidacao(campo, valido, mensagem, tamanhoContainer = null) {
    // Remover classes existentes
    campo.classList.remove('is-valid', 'is-invalid');
    
    // Aplicar nova classe
    campo.classList.add(valido ? 'is-valid' : 'is-invalid');
    
    // Atualizar mensagem de status se existir
    const statusElement = this.encontrarElementoStatus(campo);
    if (statusElement) {
      statusElement.textContent = valido ? `‚úì ${mensagem}` : `‚úó ${mensagem}`;
      statusElement.className = valido ? 'text-success' : 'text-danger';
    }
    
    // Mostrar alerta se configurado e posi√ß√£o inv√°lida
    if (!valido && this.config.SHOW_ALERTS && tamanhoContainer) {
      this.mostrarAlertaTEU(campo.value, tamanhoContainer, mensagem);
    }
  }

  /**
   * Encontra elemento de status relacionado ao campo
   */
  encontrarElementoStatus(campo) {
    // Procurar por ID espec√≠fico
    const statusId = `status-${campo.id}`;
    let statusElement = document.getElementById(statusId);
    
    if (!statusElement) {
      // Procurar elemento pr√≥ximo
      statusElement = campo.parentNode.querySelector('.status-posicao, .field-status');
    }
    
    return statusElement;
  }

  /**
   * Mostra alerta de erro TEU
   */
  mostrarAlertaTEU(posicao, tamanhoContainer, mensagem) {
    if (typeof Swal !== 'undefined') {
      Swal.fire({
        icon: 'error',
        title: 'Posi√ß√£o incompat√≠vel com TEU',
        html: `
          <p>A posi√ß√£o <strong>${posicao}</strong> n√£o √© compat√≠vel com o tamanho do container.</p>
          <div class="alert alert-info mt-3">
            <h6><i class="fas fa-info-circle"></i> Regras de Posicionamento TEU:</h6>
            <ul class="text-start mb-0">
              <li>Containers de <strong>20 p√©s</strong> ‚Üí Posi√ß√µes <strong>√≠mpares</strong> (A01, A03, A05...)</li>
              <li>Containers de <strong>40 p√©s</strong> ‚Üí Posi√ß√µes <strong>pares</strong> (A02, A04, A06...)</li>
            </ul>
          </div>
          <p class="mt-3">Este container tem <strong>${tamanhoContainer} p√©s</strong> e deve ocupar uma posi√ß√£o <strong>${tamanhoContainer === 20 ? '√≠mpar' : 'par'}</strong>.</p>
        `,
        confirmButtonText: 'Entendi',
        confirmButtonColor: '#0066b3'
      });
    } else {
      alert(`${mensagem}\n\nPosi√ß√£o: ${posicao}\nContainer: ${tamanhoContainer} p√©s`);
    }
  }

  /**
   * Limpa valida√ß√£o do campo
   */
  limparValidacao(campo) {
    campo.classList.remove('is-valid', 'is-invalid');
    
    const statusElement = this.encontrarElementoStatus(campo);
    if (statusElement) {
      statusElement.textContent = '';
      statusElement.className = '';
    }
  }

  /**
   * Configura observador de muta√ß√µes
   */
  setupMutationObserver() {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            this.processNewNode(node);
          }
        });
      });
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }

  /**
   * Processa novo n√≥ adicionado
   */
  processNewNode(node) {
    // Verificar se √© um campo de posi√ß√£o
    if (node.id && this.config.CAMPOS_POSICAO.includes(node.id)) {
      if (!this.camposMonitorados.has(node)) {
        this.setupFieldValidation(node);
        this.camposMonitorados.add(node);
        this.log(`‚úÖ Novo campo TEU detectado: ${node.id}`);
      }
    }
    
    // Verificar campos filhos
    this.config.CAMPOS_POSICAO.forEach(campoId => {
      const campo = node.querySelector ? node.querySelector(`#${campoId}`) : null;
      if (campo && !this.camposMonitorados.has(campo)) {
        this.setupFieldValidation(campo);
        this.camposMonitorados.add(campo);
        this.log(`‚úÖ Campo TEU filho detectado: ${campoId}`);
      }
    });
  }

  /**
   * Valida campo espec√≠fico (usado no blur)
   */
  validarCampo(event) {
    const campo = event.target;
    const valor = campo.value.trim();
    
    if (valor.length > 0) {
      this.validarPosicaoTEU(campo, valor.toUpperCase());
    }
  }

  /**
   * Fun√ß√£o de logging condicional
   */
  log(message, ...args) {
    if (this.config.ENABLE_DEBUG) {
      console.log(`[ValidadorTEU] ${message}`, ...args);
    }
  }

  /**
   * Destr√≥i o validador
   */
  destroy() {
    this.camposMonitorados.forEach(campo => {
      campo.removeEventListener('input', this.handleInput);
      campo.removeEventListener('blur', this.validarCampo);
      delete campo.dataset.teuValidation;
    });
    
    this.camposMonitorados.clear();
    this.isInitialized = false;
    this.log('üóëÔ∏è ValidadorTEU destru√≠do');
  }
}

// ========================================
// FUN√á√ïES UTILIT√ÅRIAS E COMPATIBILIDADE
// ========================================

/**
 * Fun√ß√£o para validar posi√ß√£o por TEU (compatibilidade)
 * @param {string} posicao - Posi√ß√£o no formato A01-1
 * @param {number} tamanhoTEU - Tamanho do container (20 ou 40)
 * @returns {object} - Resultado da valida√ß√£o
 */
function validarPosicaoPorTEU(posicao, tamanhoTEU) {
  if (window.validadorTEU) {
    return window.validadorTEU.validarRegraTEU(posicao, tamanhoTEU);
  }
  
  // Fallback se validador n√£o estiver dispon√≠vel
  const formatoValido = /^[A-E](0[1-9]|1[0-9]|20)-[1-5]$/.test(posicao);
  
  if (!formatoValido) {
    return {
      valido: false,
      mensagem: 'Formato de posi√ß√£o inv√°lido. Use o formato A01-1.'
    };
  }
  
  const baia = parseInt(posicao.substring(1, 3), 10);
  const ehPar = baia % 2 === 0;
  const posicaoValida = (tamanhoTEU === 20 && !ehPar) || (tamanhoTEU === 40 && ehPar);
  
  return {
    valido: posicaoValida,
    mensagem: posicaoValida 
      ? 'Posi√ß√£o v√°lida' 
      : `Container de ${tamanhoTEU} p√©s deve ocupar posi√ß√£o ${tamanhoTEU === 20 ? '√≠mpar' : 'par'}`
  };
}

/**
 * Valida posi√ß√£o para campo espec√≠fico
 * @param {string} campoId - ID do campo
 * @param {string} posicao - Posi√ß√£o a validar
 * @returns {boolean} - True se v√°lida
 */
function validarPosicaoTEUPorCampo(campoId, posicao) {
  const campo = document.getElementById(campoId);
  if (campo && window.validadorTEU) {
    return window.validadorTEU.validarPosicaoTEU(campo, posicao);
  }
  return true;
}

/**
 * Configura valida√ß√£o TEU para campo espec√≠fico
 * @param {string} campoId - ID do campo
 */
function configurarValidacaoTEU(campoId) {
  const campo = document.getElementById(campoId);
  if (campo && window.validadorTEU) {
    window.validadorTEU.setupFieldValidation(campo);
    window.validadorTEU.camposMonitorados.add(campo);
  }
}

// ========================================
// INICIALIZA√á√ÉO E EXPORTA√á√ïES
// ========================================

// Inst√¢ncia global
let validadorTEU = null;

/**
 * Inicializa o validador TEU
 */
function initValidadorTEU(customConfig = {}) {
  if (validadorTEU) {
    console.log('‚ÑπÔ∏è ValidadorTEU j√° existe, reconfigurando...');
    validadorTEU.destroy();
  }

  validadorTEU = new ValidadorTEU(customConfig);
  validadorTEU.initialize();

  return validadorTEU;
}

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
  console.log('üöÄ Carregando fix-posicao-teu.js...');
  
  // Inicializar ap√≥s pequeno delay
  setTimeout(() => {
    initValidadorTEU({
      ENABLE_DEBUG: window.location.search.includes('debug=teu')
    });
  }, 500);
});

// Limpeza ao descarregar p√°gina
window.addEventListener('beforeunload', function() {
  if (validadorTEU) {
    validadorTEU.destroy();
  }
});

// ========================================
// EXPORTA√á√ïES GLOBAIS
// ========================================

// Exportar para uso global
window.validadorTEU = validadorTEU;
window.initValidadorTEU = initValidadorTEU;
window.validarPosicaoPorTEU = validarPosicaoPorTEU;
window.validarPosicaoTEUPorCampo = validarPosicaoTEUPorCampo;
window.configurarValidacaoTEU = configurarValidacaoTEU;
window.ValidadorTEU = ValidadorTEU;

// Fun√ß√µes de compatibilidade
window.configurarValidacaoPosicao = () => {
  console.log('üîÑ Usando m√©todo legado, sistema moderno j√° ativo');
  if (window.validadorTEU && !window.validadorTEU.isInitialized) {
    window.validadorTEU.initialize();
  }
};

console.log('‚úÖ fix-posicao-teu.js: sistema de valida√ß√£o TEU dispon√≠vel globalmente');
console.log('üîß Uso: validarPosicaoPorTEU("A01-1", 20), configurarValidacaoTEU("campo_id")');
