#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para adicionar preenchimento autom√°tico da senha "1234" no formul√°rio de aprova√ß√£o
"""

import os
import re

def fix_approval_password():
    """Adiciona preenchimento autom√°tico da senha no formul√°rio de aprova√ß√£o"""
    
    file_path = r"c:\Users\leonardo.fragoso\Desktop\Projetos\patio-servidor\templates\admin\solicitacoes.html"
    
    if not os.path.exists(file_path):
        print(f"‚ùå Arquivo n√£o encontrado: {file_path}")
        return False
    
    try:
        # Ler o arquivo
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Padr√£o para encontrar o c√≥digo de anima√ß√£o do formul√°rio de aprova√ß√£o
        pattern = r"(form\.style\.transform = 'translateY\(0\)';)\s*(\}, 50\);)"
        
        # Substitui√ß√£o com o c√≥digo de preenchimento autom√°tico da senha
        replacement = r"""\1
                        
                        // Preencher automaticamente a senha inicial
                        const senhaInput = form.querySelector('input[name="senha_inicial"]');
                        if (senhaInput && !senhaInput.value) {
                            senhaInput.value = '1234';
                        }
                    \2"""
        
        # Fazer a substitui√ß√£o
        new_content = re.sub(pattern, replacement, content, count=1)
        
        if new_content != content:
            # Criar backup
            backup_path = file_path + '.backup_password'
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ Backup criado: {backup_path}")
            
            # Salvar o arquivo modificado
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            print("‚úÖ Preenchimento autom√°tico da senha '1234' adicionado com sucesso!")
            print("üìã Modifica√ß√£o aplicada:")
            print("   - Senha '1234' ser√° preenchida automaticamente ao abrir formul√°rio de aprova√ß√£o")
            print("   - Campo ser√° preenchido apenas se estiver vazio")
            print("   - Funcionalidade integrada √† anima√ß√£o de abertura do modal")
            
            return True
        else:
            print("‚ö†Ô∏è  Padr√£o n√£o encontrado. Tentando abordagem alternativa...")
            
            # Abordagem alternativa: procurar por um padr√£o mais espec√≠fico
            alt_pattern = r"(setTimeout\(\(\) => \{\s*form\.classList\.add\('show'\);\s*form\.style\.opacity = '1';\s*form\.style\.transform = 'translateY\(0\)';)\s*(\}, 50\);)"
            
            alt_replacement = r"""\1
                        
                        // Preencher automaticamente a senha inicial
                        const senhaInput = form.querySelector('input[name="senha_inicial"]');
                        if (senhaInput && !senhaInput.value) {
                            senhaInput.value = '1234';
                        }
                    \2"""
            
            new_content_alt = re.sub(alt_pattern, alt_replacement, content, count=1, flags=re.DOTALL)
            
            if new_content_alt != content:
                # Criar backup
                backup_path = file_path + '.backup_password'
                with open(backup_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                print(f"‚úÖ Backup criado: {backup_path}")
                
                # Salvar o arquivo modificado
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(new_content_alt)
                
                print("‚úÖ Preenchimento autom√°tico da senha '1234' adicionado com sucesso (abordagem alternativa)!")
                return True
            else:
                print("‚ùå N√£o foi poss√≠vel encontrar o padr√£o para modifica√ß√£o")
                print("üìã Verifique se o arquivo cont√©m o c√≥digo de anima√ß√£o do formul√°rio de aprova√ß√£o")
                return False
            
    except Exception as e:
        print(f"‚ùå Erro ao processar arquivo: {e}")
        return False

if __name__ == "__main__":
    print("üîß Adicionando preenchimento autom√°tico da senha '1234' no formul√°rio de aprova√ß√£o...")
    success = fix_approval_password()
    
    if success:
        print("\nüéØ CORRE√á√ÉO CONCLU√çDA!")
        print("üìù Pr√≥ximos passos:")
        print("   1. Reinicie o servidor Flask")
        print("   2. Acesse a p√°gina de solicita√ß√µes")
        print("   3. Clique em 'Aprovar' em uma solicita√ß√£o")
        print("   4. Verifique se o campo 'Senha Inicial' √© preenchido automaticamente com '1234'")
    else:
        print("\n‚ùå CORRE√á√ÉO FALHOU!")
        print("üìù Verifique manualmente o arquivo e adicione o c√≥digo:")
        print("""
        // Preencher automaticamente a senha inicial
        const senhaInput = form.querySelector('input[name="senha_inicial"]');
        if (senhaInput && !senhaInput.value) {
            senhaInput.value = '1234';
        }
        """)
